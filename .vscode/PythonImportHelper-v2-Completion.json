[
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "hospital.admin_hospital.migrations.0001_initial",
        "description": "hospital.admin_hospital.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Department\",\n            fields=[\n                (",
        "detail": "hospital.admin_hospital.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AdminConfig",
        "kind": 6,
        "importPath": "hospital.admin_hospital.apps",
        "description": "hospital.admin_hospital.apps",
        "peekOfCode": "class AdminConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"admin_hospital\"",
        "detail": "hospital.admin_hospital.apps",
        "documentation": {}
    },
    {
        "label": "PaymentForm",
        "kind": 6,
        "importPath": "hospital.admin_hospital.forms",
        "description": "hospital.admin_hospital.forms",
        "peekOfCode": "class PaymentForm(forms.Form):\n    amount = forms.DecimalField(label=\"Amount\", min_value=1.00, decimal_places=2)",
        "detail": "hospital.admin_hospital.forms",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "hospital.admin_hospital.models",
        "description": "hospital.admin_hospital.models",
        "peekOfCode": "class CustomUser(AbstractUser):\n    is_doctor = models.BooleanField(default=False)\n    is_patient = models.BooleanField(default=False)\n    is_admin = models.BooleanField(default=False)\n    def __str__(self):\n        return self.username\nclass Department(models.Model):\n    name = models.CharField(max_length=200) \n    def __str__(self):\n        return self.name",
        "detail": "hospital.admin_hospital.models",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "hospital.admin_hospital.models",
        "description": "hospital.admin_hospital.models",
        "peekOfCode": "class Department(models.Model):\n    name = models.CharField(max_length=200) \n    def __str__(self):\n        return self.name\nclass Doctor(models.Model):\n    name = models.CharField(max_length=200)\n    mobile = models.CharField(max_length=20, null=True)\n    department = models.ForeignKey(Department, on_delete=models.CASCADE)\n    def __str__(self):\n        return self.name",
        "detail": "hospital.admin_hospital.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "kind": 6,
        "importPath": "hospital.admin_hospital.models",
        "description": "hospital.admin_hospital.models",
        "peekOfCode": "class Doctor(models.Model):\n    name = models.CharField(max_length=200)\n    mobile = models.CharField(max_length=20, null=True)\n    department = models.ForeignKey(Department, on_delete=models.CASCADE)\n    def __str__(self):\n        return self.name\nclass Patient(models.Model):\n    name = models.CharField(max_length=200)\n    gender = models.CharField(max_length=10)\n    mobile = models.CharField(max_length=20, null=True)  ",
        "detail": "hospital.admin_hospital.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "hospital.admin_hospital.models",
        "description": "hospital.admin_hospital.models",
        "peekOfCode": "class Patient(models.Model):\n    name = models.CharField(max_length=200)\n    gender = models.CharField(max_length=10)\n    mobile = models.CharField(max_length=20, null=True)  \n    email = models.EmailField(max_length=100)\n    address = models.CharField(max_length=250)\n    def __str__(self):\n        return self.name\nclass Appointment(models.Model):\n    doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE)",
        "detail": "hospital.admin_hospital.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "kind": 6,
        "importPath": "hospital.admin_hospital.models",
        "description": "hospital.admin_hospital.models",
        "peekOfCode": "class Appointment(models.Model):\n    doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE)\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)\n    date1 = models.DateField()\n    time1 = models.TimeField()\n    def __str__(self):\n        return f\"{self.doctor.name} -- {self.patient.name}\"\nclass MedicalHistory(models.Model):\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='medical_histories')\n    diagnosis = models.TextField()",
        "detail": "hospital.admin_hospital.models",
        "documentation": {}
    },
    {
        "label": "MedicalHistory",
        "kind": 6,
        "importPath": "hospital.admin_hospital.models",
        "description": "hospital.admin_hospital.models",
        "peekOfCode": "class MedicalHistory(models.Model):\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='medical_histories')\n    diagnosis = models.TextField()\n    treatment = models.TextField()\n    date_of_treatment = models.DateField()\n    prescribed_medication = models.TextField()\n    def __str__(self):\n        return f\"Medical history of {self.patient.name}\"",
        "detail": "hospital.admin_hospital.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "hospital.admin_hospital.urls",
        "description": "hospital.admin_hospital.urls",
        "peekOfCode": "urlpatterns = [\n        path('', views.Home, name='home'),\n        path(\"contact/\",views.Contact,name='contact'),\n        path(\"about/\",views.About,name='about'),\n        path(\"doctor_list/\",views.Doctor_List,name='doctor_list'),\n        path(\"appointment/\",views.Appointment_Page,name='appointment'),\n        path(\"service/\",views.Service,name='service'),\n        path(\"login/\",views.Login,name='login'),\n        path('logout/', views.Logout, name='logout'),\n        path('register_admin/', views.register_admin, name='register_admin'), ",
        "detail": "hospital.admin_hospital.urls",
        "documentation": {}
    },
    {
        "label": "Home",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Home(request):\n    return render(request,'base.html')\ndef Contact(request):\n    return render(request,'contact.html')\ndef About(request):\n    return render(request,'about.html')\ndef Doctor_List(request):\n    return render(request,'doctor_list.html')\ndef Appointment_Page(request):\n    return render(request,'appointment.html')",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Contact",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Contact(request):\n    return render(request,'contact.html')\ndef About(request):\n    return render(request,'about.html')\ndef Doctor_List(request):\n    return render(request,'doctor_list.html')\ndef Appointment_Page(request):\n    return render(request,'appointment.html')\ndef Service(request):\n    return render(request,'service.html')",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "About",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def About(request):\n    return render(request,'about.html')\ndef Doctor_List(request):\n    return render(request,'doctor_list.html')\ndef Appointment_Page(request):\n    return render(request,'appointment.html')\ndef Service(request):\n    return render(request,'service.html')\ndef Login(request):\n    if request.method == 'POST':",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Doctor_List",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Doctor_List(request):\n    return render(request,'doctor_list.html')\ndef Appointment_Page(request):\n    return render(request,'appointment.html')\ndef Service(request):\n    return render(request,'service.html')\ndef Login(request):\n    if request.method == 'POST':\n        uname = request.POST['uname']\n        pwd = request.POST['pwd']",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Appointment_Page",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Appointment_Page(request):\n    return render(request,'appointment.html')\ndef Service(request):\n    return render(request,'service.html')\ndef Login(request):\n    if request.method == 'POST':\n        uname = request.POST['uname']\n        pwd = request.POST['pwd']\n        role = request.POST['role']\n        # Authenticate the user",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Service",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Service(request):\n    return render(request,'service.html')\ndef Login(request):\n    if request.method == 'POST':\n        uname = request.POST['uname']\n        pwd = request.POST['pwd']\n        role = request.POST['role']\n        # Authenticate the user\n        user = authenticate(username=uname, password=pwd)\n        if user is not None:",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Login",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Login(request):\n    if request.method == 'POST':\n        uname = request.POST['uname']\n        pwd = request.POST['pwd']\n        role = request.POST['role']\n        # Authenticate the user\n        user = authenticate(username=uname, password=pwd)\n        if user is not None:\n            # Check for the role and user type\n            if role == \"admin\" or user.is_admin:",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Logout",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Logout(request):\n    if request.user.is_authenticated:\n        logout(request)\n    return redirect('login')\ndef register_patient(request):\n    if request.method == 'POST':\n        uname = request.POST['uname']\n        pwd = request.POST['pwd']\n        try:\n            user = CustomUser.objects.create_user(username=uname, password=pwd)",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "register_patient",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def register_patient(request):\n    if request.method == 'POST':\n        uname = request.POST['uname']\n        pwd = request.POST['pwd']\n        try:\n            user = CustomUser.objects.create_user(username=uname, password=pwd)\n            user.is_patient = True  \n            user.save()\n            messages.success(request, 'Registration successful! Please log in.')\n            return redirect('login') ",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "register_doctor",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def register_doctor(request):\n    if request.method == 'POST':\n        uname = request.POST['uname']\n        pwd = request.POST['pwd']\n        try:\n            user = CustomUser.objects.create_user(username=uname, password=pwd)\n            user.is_doctor = True  \n            user.save()\n            messages.success(request, 'Registration successful! Please log in.')\n            return redirect('login') ",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "register_admin",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def register_admin(request):\n    if request.method == 'POST':\n        uname = request.POST['uname']\n        pwd = request.POST['pwd']\n        try:\n            user = CustomUser.objects.create_user(username=uname, password=pwd)\n            user.is_admin = True  \n            user.save()\n            messages.success(request, 'Registration successful! Please log in.')\n            return redirect('login') ",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "admin_dashboard",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def admin_dashboard(request):\n    return render(request, 'admin_dashboard.html')\ndef Add_Doctor(request):\n    error=\"\"\n    if not request.user.is_admin:\n        return redirect('login')\n    departments = Department.objects.all()\n    if request.method == 'POST':\n        n=request.POST['name']\n        m=request.POST['mobile']",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Add_Doctor",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Add_Doctor(request):\n    error=\"\"\n    if not request.user.is_admin:\n        return redirect('login')\n    departments = Department.objects.all()\n    if request.method == 'POST':\n        n=request.POST['name']\n        m=request.POST['mobile']\n        d_id=request.POST['department']\n        try:",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "View_Doctor",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def View_Doctor(request):\n    if not request.user.is_admin:\n        return redirect('login')\n    doc=Doctor.objects.all()\n    d={'doc':doc}\n    return render(request,'view_doctor.html',d)\ndef Delete_Doctor(request,pid):\n    if not request.user.is_admin:\n        return redirect('login')\n    doctor=Doctor.objects.get(id=pid)",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Delete_Doctor",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Delete_Doctor(request,pid):\n    if not request.user.is_admin:\n        return redirect('login')\n    doctor=Doctor.objects.get(id=pid)\n    doctor.delete()\n    return redirect('view_doctor')\ndef doctor_dashboard(request):\n    return render(request, 'doctor_dashboard.html')\ndef Add_Patient(request):\n    error=\"\"",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "doctor_dashboard",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def doctor_dashboard(request):\n    return render(request, 'doctor_dashboard.html')\ndef Add_Patient(request):\n    error=\"\"\n    if not request.user.is_authenticated:\n        return redirect('login')\n    if request.method == 'POST':\n        n=request.POST['name']\n        g=request.POST['gender']\n        m=request.POST['mobile']",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Add_Patient",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Add_Patient(request):\n    error=\"\"\n    if not request.user.is_authenticated:\n        return redirect('login')\n    if request.method == 'POST':\n        n=request.POST['name']\n        g=request.POST['gender']\n        m=request.POST['mobile']\n        e=request.POST['email']\n        a=request.POST['address']",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "View_Patient",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def View_Patient(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    pat=Patient.objects.all()\n    p={'pat':pat}\n    return render(request,'view_patient.html',p)\ndef Delete_Patient(request,pid):\n    if not request.user.is_admin:\n        return redirect('login')\n    patient=Patient.objects.get(id=pid)",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Delete_Patient",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Delete_Patient(request,pid):\n    if not request.user.is_admin:\n        return redirect('login')\n    patient=Patient.objects.get(id=pid)\n    patient.delete()\n    return redirect('view_patient')\ndef patient_dashboard(request):\n    return render(request, 'patient_dashboard.html')\ndef Add_Appointment(request):\n    error = \"\"",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "patient_dashboard",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def patient_dashboard(request):\n    return render(request, 'patient_dashboard.html')\ndef Add_Appointment(request):\n    error = \"\"\n    if not request.user.is_authenticated:\n        return redirect('login')\n    # Get all doctors and patients\n    doctor1 = Doctor.objects.all()\n    patient1 = Patient.objects.all()\n    if request.method == 'POST':",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Add_Appointment",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Add_Appointment(request):\n    error = \"\"\n    if not request.user.is_authenticated:\n        return redirect('login')\n    # Get all doctors and patients\n    doctor1 = Doctor.objects.all()\n    patient1 = Patient.objects.all()\n    if request.method == 'POST':\n        # Get the selected doctor, patient, date, and time from the form\n        d = request.POST['doctor']",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "View_Appointment",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def View_Appointment(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    appoint=Appointment.objects.all()\n    app={'appoint':appoint}\n    return render(request,'view_appointment.html',app)\ndef Delete_Appointment(request,pid):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    appoint=Appointment.objects.get(id=pid)",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Delete_Appointment",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Delete_Appointment(request,pid):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    appoint=Appointment.objects.get(id=pid)\n    appoint.delete()\n    return redirect('view_appointment')\ndef create_checkout_session(request):\n    if request.method == 'POST':  \n        form = PaymentForm(request.POST)\n        if form.is_valid():  ",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "create_checkout_session",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def create_checkout_session(request):\n    if request.method == 'POST':  \n        form = PaymentForm(request.POST)\n        if form.is_valid():  \n            amount = form.cleaned_data['amount']\n            amount_in_cents = int(amount * 100)\n            stripe.api_key = settings.STRIPE_SECRET_KEY\n            checkout_session = stripe.checkout.Session.create(\n                payment_method_types=['card'],\n                mode='payment',",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "success",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def success(request):\n    return render(request,'success.html')\ndef cancel(request):\n    return render(request,'cancel.html')\ndef Add_Medical(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    # Get all patients to display in the form dropdown or field\n    patients = Patient.objects.all()\n    if request.method == 'POST':",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "cancel",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def cancel(request):\n    return render(request,'cancel.html')\ndef Add_Medical(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    # Get all patients to display in the form dropdown or field\n    patients = Patient.objects.all()\n    if request.method == 'POST':\n        # Getting form data\n        pat = request.POST['patient']",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Add_Medical",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Add_Medical(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    # Get all patients to display in the form dropdown or field\n    patients = Patient.objects.all()\n    if request.method == 'POST':\n        # Getting form data\n        pat = request.POST['patient']\n        dia = request.POST['diagnosis']\n        tre = request.POST['treatment']",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "View_Medical",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def View_Medical(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    # Fetch all medical history records\n    medical_histories = MedicalHistory.objects.all()\n    # Send the medical histories to the template for rendering\n    return render(request, 'view_medical.html', {'medical_histories': medical_histories})\ndef Delete_Medical(request, pid):\n    if not request.user.is_authenticated or not request.user.is_doctor:\n        return redirect('login')",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "Delete_Medical",
        "kind": 2,
        "importPath": "hospital.admin_hospital.views",
        "description": "hospital.admin_hospital.views",
        "peekOfCode": "def Delete_Medical(request, pid):\n    if not request.user.is_authenticated or not request.user.is_doctor:\n        return redirect('login')\n    medical_history = MedicalHistory.objects.get(id=pid)\n    medical_history.delete()\n    return redirect('view_medical')",
        "detail": "hospital.admin_hospital.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "hospital.hospital.asgi",
        "description": "hospital.hospital.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "hospital.hospital.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-16*x%qjbk&3t)+-h&$a(p5!7=baprj0s!!974s@0ritvrzmzig\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-16*x%qjbk&3t)+-h&$a(p5!7=baprj0s!!974s@0ritvrzmzig\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    'admin_hospital',",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    'admin_hospital',\n]\nMIDDLEWARE = [",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"hospital.urls\"",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "ROOT_URLCONF = \"hospital.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / 'templates',],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / 'templates',],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "WSGI_APPLICATION = \"hospital.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'admin_hospital.CustomUser'\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\nLANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')\nMEDIA_URL='/media/'",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')\nMEDIA_URL='/media/'\nMEDIA_ROOT=os.path.join(BASE_DIR,'media')",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')\nMEDIA_URL='/media/'\nMEDIA_ROOT=os.path.join(BASE_DIR,'media')\n# Default primary key field type",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')\nMEDIA_URL='/media/'\nMEDIA_ROOT=os.path.join(BASE_DIR,'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')\nMEDIA_URL='/media/'\nMEDIA_ROOT=os.path.join(BASE_DIR,'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nSTRIPE_PUBLISHABLE_KEY='pk_test_51QdplWH6Irg9w7lgplooXXo0vnVTQM5LbVWB3pLCqgXMrL1vheUEri6Mpuo1Qu4UMzRCBNtc5Ek88t1h5r8tWG4y00jHLK7UFG'\nSTRIPE_SECRET_KEY='sk_test_51QdplWH6Irg9w7lgtrfzkdsm9ytzY5VmaVMZJSLdjDiyZtwWefEG5q4GWVP42rRdkjuAcQUIM1p1sLHETLiHf3Vt00AYtj0zjL'",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]\nSTATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')\nMEDIA_URL='/media/'\nMEDIA_ROOT=os.path.join(BASE_DIR,'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nSTRIPE_PUBLISHABLE_KEY='pk_test_51QdplWH6Irg9w7lgplooXXo0vnVTQM5LbVWB3pLCqgXMrL1vheUEri6Mpuo1Qu4UMzRCBNtc5Ek88t1h5r8tWG4y00jHLK7UFG'\nSTRIPE_SECRET_KEY='sk_test_51QdplWH6Irg9w7lgtrfzkdsm9ytzY5VmaVMZJSLdjDiyZtwWefEG5q4GWVP42rRdkjuAcQUIM1p1sLHETLiHf3Vt00AYtj0zjL'",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "hospital.hospital.settings",
        "description": "hospital.hospital.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nSTRIPE_PUBLISHABLE_KEY='pk_test_51QdplWH6Irg9w7lgplooXXo0vnVTQM5LbVWB3pLCqgXMrL1vheUEri6Mpuo1Qu4UMzRCBNtc5Ek88t1h5r8tWG4y00jHLK7UFG'\nSTRIPE_SECRET_KEY='sk_test_51QdplWH6Irg9w7lgtrfzkdsm9ytzY5VmaVMZJSLdjDiyZtwWefEG5q4GWVP42rRdkjuAcQUIM1p1sLHETLiHf3Vt00AYtj0zjL'",
        "detail": "hospital.hospital.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "hospital.hospital.urls",
        "description": "hospital.hospital.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\",include(\"admin_hospital.urls\"))\n]\nif settings.DEBUG:\n    urlpatterns+=static(settings.STATIC_URL,document_root=settings.STATIC_ROOT)\n    urlpatterns+=static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)",
        "detail": "hospital.hospital.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "hospital.hospital.wsgi",
        "description": "hospital.hospital.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "hospital.hospital.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "hospital.manage",
        "description": "hospital.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"hospital.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "hospital.manage",
        "documentation": {}
    }
]